from github import Github
from datetime import datetime, timedelta

# Replace 'your_personal_access_token' with your GitHub personal access token
token = 'your_personal_access_token'

# Replace 'https://github.flipcart.com/api/v3' with your custom GitHub API base URL
custom_base_url = 'https://github.flipcart.com/api/v3'

# Initialize the GitHub API client with the custom base URL
g = Github(login_or_token=token, base_url=custom_base_url)

# Define the age limit for branches (15 days)
age_limit = timedelta(days=15)

# Function to remove branches older than a specified age, except 'master'
def remove_old_branches(repo):
    branches_deleted = False  # Flag to track if any branches were deleted
    for branch in repo.get_branches():
        # Skip 'master' branch
        if branch.name == 'master':
            continue

        last_commit = branch.commit.commit.author.date
        branch_age = datetime.now() - last_commit
        if branch_age > age_limit:
            print(f"Deleting branch '{branch.name}' in repository '{repo.full_name}' (last commit: {last_commit})")
            try:
                # Delete the branch using the GitHub API
                branch.edit(protection=False)  # Disable branch protection
                branch.delete()
                branches_deleted = True  # Set the flag to True if a branch was deleted
            except Exception as e:
                print(f"Error deleting branch '{branch.name}': {str(e)}")

    # Print a message if no branches were deleted
    if not branches_deleted:
        print(f"No branches older than {age_limit} found in repository '{repo.full_name}'.")

# List of specific repository names you want to target
repo_names_to_delete_from = ['npe-serverclass-ds']

# Iterate through the specific repositories and call the function to remove old branches for each
for repo_name in repo_names_to_delete_from:
    repo = g.get_repo(repo_name)
    try:
        # Add debugging statements before making API requests
        print(f"API Request URL: {g.session.get_url()}")
        print(f"API Request Headers: {g.session.headers}")
        
        remove_old_branches(repo)
    except Exception as e:
        print(f"Error: {str(e)}")
